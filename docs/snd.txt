#include <stdio.h>
#include <stdlib.h>
#include <alsa/asoundlib.h>

#define PCM_DEVICE "default"

int main() {
    int err;
    snd_pcm_t *handle;
    snd_pcm_hw_params_t *params;
    unsigned int rate = 44100;   // Sample rate
    int channels = 1;            // Mono
    int bits_per_sample = 16;    // 16-bit sample size
    snd_pcm_format_t format = SND_PCM_FORMAT_S16_LE;

    if ((err = snd_pcm_open(&handle, PCM_DEVICE, SND_PCM_STREAM_CAPTURE, 0)) < 0) {
        fprintf(stderr, "Cannot open audio device %s (%s)\n", PCM_DEVICE, snd_strerror(err));
        exit(EXIT_FAILURE);
    }

    snd_pcm_hw_params_alloca(&params);

    if ((err = snd_pcm_hw_params_any(handle, params)) < 0) {
        fprintf(stderr, "Cannot configure this PCM device: %s\n", snd_strerror(err));
        exit(EXIT_FAILURE);
    }

    if ((err = snd_pcm_hw_params_set_access(handle, params, SND_PCM_ACCESS_RW_INTERLEAVED)) < 0) {
        fprintf(stderr, "Cannot set access type: %s\n", snd_strerror(err));
        exit(EXIT_FAILURE);
    }

    if ((err = snd_pcm_hw_params_set_format(handle, params, format)) < 0) {
        fprintf(stderr, "Cannot set sample format: %s\n", snd_strerror(err));
        exit(EXIT_FAILURE);
    }

    if ((err = snd_pcm_hw_params_set_rate_near(handle, params, &rate, 0)) < 0) {
        fprintf(stderr, "Cannot set sample rate: %s\n", snd_strerror(err));
        exit(EXIT_FAILURE);
    }

    if ((err = snd_pcm_hw_params_set_channels(handle, params, channels)) < 0) {
        fprintf(stderr, "Cannot set channel count: %s\n", snd_strerror(err));
        exit(EXIT_FAILURE);
    }

    if ((err = snd_pcm_hw_params(handle, params)) < 0) {
        fprintf(stderr, "Cannot set parameters: %s\n", snd_strerror(err));
        exit(EXIT_FAILURE);
    }

    snd_pcm_hw_params_free(params);

    printf("Press Ctrl+C to stop capturing.\n");

    while (1) {
        short buf[1024];

        if ((err = snd_pcm_readi(handle, buf, sizeof(buf) / sizeof(buf[0])) < 0) {
            fprintf(stderr, "Read error: %s\n", snd_strerror(err));
            break;
        }

        // Process or send the captured audio data as needed
        // For simplicity, we'll print the first few samples
        printf("Captured samples: %d, Sample 1: %d\n", err, buf[0]);
    }

    snd_pcm_close(handle);
    return 0;
}

